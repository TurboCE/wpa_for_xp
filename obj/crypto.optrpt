
Begin optimization report for: decrypt_wep(unsigned char *, int, unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(100,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 634 and crc line 634
LOOP END

LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(100,13)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc_pmk(char *, char *, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(195,2)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(201,2)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(212,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(222,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(222,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(230,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(240,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(240,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: sha1_16precalc(SHA1_MOD_CTX *, unsigned char (*)[64])

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(331,7)
   remark #15301: SIMD LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(346,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(347,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/crypto.c(347,5)
      <Multiversioned v2>
         remark #15300: LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(261,3) inlined into src/crypto.c(352,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ src/crypto.c(266,7) ]

   LOOP BEGIN at src/crypto.c(266,7) inlined into src/crypto.c(352,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between m line 268 and m line 267
   LOOP END

   LOOP BEGIN at src/crypto.c(264,7) inlined into src/crypto.c(352,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(272,3) inlined into src/crypto.c(352,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at src/crypto.c(281,3) inlined into src/crypto.c(352,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at src/crypto.c(291,7) inlined into src/crypto.c(352,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 292 and t line 297
   LOOP END

   LOOP BEGIN at src/crypto.c(291,7) inlined into src/crypto.c(352,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(299,7) inlined into src/crypto.c(352,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 300 and t line 305
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7) inlined into src/crypto.c(352,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 308 and t line 313
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7) inlined into src/crypto.c(352,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(283,7) inlined into src/crypto.c(352,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 284 and t line 289
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(316,3) inlined into src/crypto.c(352,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================

Begin optimization report for: calc_16pmk(char (*)[128], char *, unsigned char (*)[40])

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(478,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(480,7)
      remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at src/crypto.c(482,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/crypto.c(482,7)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at src/crypto.c(482,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(487,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(488,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(331,7) inlined into src/crypto.c(491,3)
   remark #15301: SIMD LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(346,3) inlined into src/crypto.c(491,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between buffer line 347 and data line 349

   LOOP BEGIN at src/crypto.c(347,5) inlined into src/crypto.c(491,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at src/crypto.c(347,5) inlined into src/crypto.c(491,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(261,3) inlined into src/crypto.c(491,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ src/crypto.c(266,7) ]

   LOOP BEGIN at src/crypto.c(266,7) inlined into src/crypto.c(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between m line 268 and m line 267
   LOOP END

   LOOP BEGIN at src/crypto.c(264,7) inlined into src/crypto.c(491,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(272,3) inlined into src/crypto.c(491,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at src/crypto.c(281,3) inlined into src/crypto.c(491,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at src/crypto.c(291,7) inlined into src/crypto.c(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 292 and t line 297
   LOOP END

   LOOP BEGIN at src/crypto.c(291,7) inlined into src/crypto.c(491,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(299,7) inlined into src/crypto.c(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 300 and t line 305
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7) inlined into src/crypto.c(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 308 and t line 313
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7) inlined into src/crypto.c(491,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(283,7) inlined into src/crypto.c(491,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 284 and t line 289
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(316,3) inlined into src/crypto.c(491,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at src/crypto.c(493,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(494,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(331,7) inlined into src/crypto.c(497,3)
   remark #15301: SIMD LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(346,3) inlined into src/crypto.c(497,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between buffer line 347 and data line 349

   LOOP BEGIN at src/crypto.c(347,5) inlined into src/crypto.c(497,3)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at src/crypto.c(347,5) inlined into src/crypto.c(497,3)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(261,3) inlined into src/crypto.c(497,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ src/crypto.c(266,7) ]

   LOOP BEGIN at src/crypto.c(266,7) inlined into src/crypto.c(497,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between m line 268 and m line 267
   LOOP END

   LOOP BEGIN at src/crypto.c(264,7) inlined into src/crypto.c(497,3)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(272,3) inlined into src/crypto.c(497,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at src/crypto.c(281,3) inlined into src/crypto.c(497,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at src/crypto.c(291,7) inlined into src/crypto.c(497,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 292 and t line 297
   LOOP END

   LOOP BEGIN at src/crypto.c(291,7) inlined into src/crypto.c(497,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(299,7) inlined into src/crypto.c(497,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 300 and t line 305
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7) inlined into src/crypto.c(497,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 308 and t line 313
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7) inlined into src/crypto.c(497,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(283,7) inlined into src/crypto.c(497,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 284 and t line 289
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(316,3) inlined into src/crypto.c(497,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at src/crypto.c(503,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at src/crypto.c(506,3)
   remark #15527: loop was not vectorized: function call to memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ src/crypto.c(507,5) ]
LOOP END

LOOP BEGIN at src/crypto.c(508,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(512,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/crypto.c(513,2)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at src/crypto.c(513,2)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(518,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at src/crypto.c(524,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(528,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at src/crypto.c(529,2)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at src/crypto.c(529,2)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: sha1_16finalcalc(SHA1_MOD_CTX *, SHA1_MOD_CTX *, SHA1_MOD_CTX *, unsigned char (*)[64])

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(363,3)
   remark #15527: loop was not vectorized: function call to memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ src/crypto.c(364,5) ]
LOOP END

LOOP BEGIN at src/crypto.c(367,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(368,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(368,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(373,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between ctx line 380 and ctx line 382

   LOOP BEGIN at src/crypto.c(381,7)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at src/crypto.c(392,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(397,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between buffer line 402 and ctx line 406

   LOOP BEGIN at src/crypto.c(401,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between buffer line 402 and ctx line 406
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(413,3)
   remark #15527: loop was not vectorized: function call to memcpy(void *__restrict__, const void *__restrict__, size_t) cannot be vectorized   [ src/crypto.c(415,7) ]
LOOP END

LOOP BEGIN at src/crypto.c(420,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(421,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(421,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(426,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between ctx line 433 and ctx line 435

   LOOP BEGIN at src/crypto.c(434,7)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   LOOP END

   LOOP BEGIN at src/crypto.c(445,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(450,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between buffer line 455 and ctx line 459

   LOOP BEGIN at src/crypto.c(454,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between buffer line 455 and ctx line 459
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: sha1_16transform(SHA1_MOD_CTX *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(261,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ src/crypto.c(266,7) ]

   LOOP BEGIN at src/crypto.c(266,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between m line 268 and m line 267
   LOOP END

   LOOP BEGIN at src/crypto.c(264,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(272,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at src/crypto.c(281,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details

   LOOP BEGIN at src/crypto.c(291,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 292 and t line 297
   LOOP END

   LOOP BEGIN at src/crypto.c(291,7)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(299,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 300 and t line 305
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 308 and t line 313
   LOOP END

   LOOP BEGIN at src/crypto.c(307,7)
   <Remainder>
   LOOP END

   LOOP BEGIN at src/crypto.c(283,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between t line 284 and t line 289
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(316,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END
===========================================================================

Begin optimization report for: calc_crc(unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(633,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 634 and crc line 634
LOOP END

LOOP BEGIN at src/crypto.c(633,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc_crc_plain(unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(644,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 645 and crc line 645
LOOP END

LOOP BEGIN at src/crypto.c(644,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: check_crc_buf(unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(656,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 634 and crc line 634
LOOP END

LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(656,11)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: add_crc32(unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(670,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 634 and crc line 634
LOOP END

LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(670,11)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: add_crc32_plain(unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(644,5) inlined into src/crypto.c(684,11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 645 and crc line 645
LOOP END

LOOP BEGIN at src/crypto.c(644,5) inlined into src/crypto.c(684,11)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc_crc_buf(unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(696,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 634 and crc line 634
LOOP END

LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(696,13)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc_ptk(struct WPA_ST_info *, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(970,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between pke line 972 and pke line 973
LOOP END
===========================================================================

Begin optimization report for: michael_append(struct Michael *, unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1046,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bytes line 1048 and mic line 1016
LOOP END
===========================================================================

Begin optimization report for: michael_remove(struct Michael *, unsigned char *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1056,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bytes line 1026 and mic line 1039
LOOP END
===========================================================================

Begin optimization report for: michael_test(unsigned char *, unsigned char *, int, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1137,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at src/crypto.c(1144,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at src/crypto.c(1151,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at src/crypto.c(1046,5) inlined into src/crypto.c(1158,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between message line 1000 and message line 1015
LOOP END
===========================================================================

Begin optimization report for: michael_finalize(struct Michael *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1073,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: michael_finalize_zero(struct Michael *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1099,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END
===========================================================================

Begin optimization report for: calc_tkip_mic_key(unsigned char *, int, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1056,5) inlined into src/crypto.c(1227,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between left line 1028 and left line 1030
LOOP END
===========================================================================

Begin optimization report for: calc_tkip_mic(unsigned char *, int, unsigned char *, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1046,5) inlined into src/crypto.c(1291,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bytes line 1048 and nBytesInM line 1016
LOOP END

LOOP BEGIN at src/crypto.c(1046,5) inlined into src/crypto.c(1292,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bytes line 1048 and nBytesInM line 1016
LOOP END

LOOP BEGIN at src/crypto.c(1046,5) inlined into src/crypto.c(1299,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bytes line 1048 and nBytesInM line 1016
LOOP END

LOOP BEGIN at src/crypto.c(1046,5) inlined into src/crypto.c(1301,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between bytes line 1048 and nBytesInM line 1016
LOOP END

LOOP BEGIN at src/crypto.c(1046,5) inlined into src/crypto.c(1301,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: decrypt_tkip(unsigned char *, int, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(1468,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between crc line 634 and crc line 634
LOOP END

LOOP BEGIN at src/crypto.c(633,5) inlined into src/crypto.c(1468,13)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: calc_tkip_ppk(unsigned char *, int, unsigned char *, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1417,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 1423 and  line 1419
LOOP END

LOOP BEGIN at src/crypto.c(1437,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between PPK line 1437 and PPK line 1437
LOOP END

LOOP BEGIN at src/crypto.c(1447,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1447,5)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: encrypt_ccmp(unsigned char *, int, unsigned char *, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1579,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1581,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1599,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1603,9)
   <Multiversioned v1>
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1603,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1603,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1603,9)
   <Remainder, Multiversioned v2>
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1612,9)
   <Multiversioned v1>
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1612,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1612,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1612,9)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1625,5)
<Multiversioned v1>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1625,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END
===========================================================================

Begin optimization report for: decrypt_ccmp(unsigned char *, int, unsigned char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1706,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1708,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1718,5)
<Multiversioned v1>
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1718,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at src/crypto.c(1726,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1736,9)
   <Multiversioned v1>
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1736,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1736,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1736,9)
   <Remainder, Multiversioned v2>
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1738,9)
   <Multiversioned v1>
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1738,9)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1738,9)
   <Multiversioned v2>
      remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   LOOP END

   LOOP BEGIN at src/crypto.c(1476,5) inlined into src/crypto.c(1738,9)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END
===========================================================================
